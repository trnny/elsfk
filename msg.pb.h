// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class Msg_DataEntry_DoNotUse;
class Msg_DataEntry_DoNotUseDefaultTypeInternal;
extern Msg_DataEntry_DoNotUseDefaultTypeInternal _Msg_DataEntry_DoNotUse_default_instance_;
class Msg_VType;
class Msg_VTypeDefaultTypeInternal;
extern Msg_VTypeDefaultTypeInternal _Msg_VType_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Msg* Arena::CreateMaybeMessage<::Msg>(Arena*);
template<> ::Msg_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::Msg_DataEntry_DoNotUse>(Arena*);
template<> ::Msg_VType* Arena::CreateMaybeMessage<::Msg_VType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Msg_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Msg_DataEntry_DoNotUse, 
    std::string, ::Msg_VType,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Msg_DataEntry_DoNotUse, 
    std::string, ::Msg_VType,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Msg_DataEntry_DoNotUse();
  explicit Msg_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Msg_DataEntry_DoNotUse& other);
  static const Msg_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Msg_DataEntry_DoNotUse*>(&_Msg_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Msg.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Msg_VType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.VType) */ {
 public:
  inline Msg_VType() : Msg_VType(nullptr) {}
  virtual ~Msg_VType();

  Msg_VType(const Msg_VType& from);
  Msg_VType(Msg_VType&& from) noexcept
    : Msg_VType() {
    *this = ::std::move(from);
  }

  inline Msg_VType& operator=(const Msg_VType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_VType& operator=(Msg_VType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_VType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_VType* internal_default_instance() {
    return reinterpret_cast<const Msg_VType*>(
               &_Msg_VType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_VType& a, Msg_VType& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_VType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_VType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg_VType* New() const final {
    return CreateMaybeMessage<Msg_VType>(nullptr);
  }

  Msg_VType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_VType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_VType& from);
  void MergeFrom(const Msg_VType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_VType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.VType";
  }
  protected:
  explicit Msg_VType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrStrFieldNumber = 4,
    kVrIntFieldNumber = 5,
    kVStrFieldNumber = 1,
    kVBytesFieldNumber = 6,
    kVIntFieldNumber = 2,
    kVBoolFieldNumber = 3,
    kWhichFieldNumber = 7,
  };
  // repeated string vr_str = 4;
  int vr_str_size() const;
  private:
  int _internal_vr_str_size() const;
  public:
  void clear_vr_str();
  const std::string& vr_str(int index) const;
  std::string* mutable_vr_str(int index);
  void set_vr_str(int index, const std::string& value);
  void set_vr_str(int index, std::string&& value);
  void set_vr_str(int index, const char* value);
  void set_vr_str(int index, const char* value, size_t size);
  std::string* add_vr_str();
  void add_vr_str(const std::string& value);
  void add_vr_str(std::string&& value);
  void add_vr_str(const char* value);
  void add_vr_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vr_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vr_str();
  private:
  const std::string& _internal_vr_str(int index) const;
  std::string* _internal_add_vr_str();
  public:

  // repeated int32 vr_int = 5;
  int vr_int_size() const;
  private:
  int _internal_vr_int_size() const;
  public:
  void clear_vr_int();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vr_int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_vr_int() const;
  void _internal_add_vr_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_vr_int();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 vr_int(int index) const;
  void set_vr_int(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_vr_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      vr_int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_vr_int();

  // string v_str = 1;
  void clear_v_str();
  const std::string& v_str() const;
  void set_v_str(const std::string& value);
  void set_v_str(std::string&& value);
  void set_v_str(const char* value);
  void set_v_str(const char* value, size_t size);
  std::string* mutable_v_str();
  std::string* release_v_str();
  void set_allocated_v_str(std::string* v_str);
  private:
  const std::string& _internal_v_str() const;
  void _internal_set_v_str(const std::string& value);
  std::string* _internal_mutable_v_str();
  public:

  // bytes v_bytes = 6;
  void clear_v_bytes();
  const std::string& v_bytes() const;
  void set_v_bytes(const std::string& value);
  void set_v_bytes(std::string&& value);
  void set_v_bytes(const char* value);
  void set_v_bytes(const void* value, size_t size);
  std::string* mutable_v_bytes();
  std::string* release_v_bytes();
  void set_allocated_v_bytes(std::string* v_bytes);
  private:
  const std::string& _internal_v_bytes() const;
  void _internal_set_v_bytes(const std::string& value);
  std::string* _internal_mutable_v_bytes();
  public:

  // int32 v_int = 2;
  void clear_v_int();
  ::PROTOBUF_NAMESPACE_ID::int32 v_int() const;
  void set_v_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v_int() const;
  void _internal_set_v_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool v_bool = 3;
  void clear_v_bool();
  bool v_bool() const;
  void set_v_bool(bool value);
  private:
  bool _internal_v_bool() const;
  void _internal_set_v_bool(bool value);
  public:

  // int32 which = 7;
  void clear_which();
  ::PROTOBUF_NAMESPACE_ID::int32 which() const;
  void set_which(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_which() const;
  void _internal_set_which(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Msg.VType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vr_str_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > vr_int_;
  mutable std::atomic<int> _vr_int_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_int_;
  bool v_bool_;
  ::PROTOBUF_NAMESPACE_ID::int32 which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  virtual ~Msg();

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Msg_VType VType;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // map<string, .Msg.VType> data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >*
      mutable_data();

  // string desc = 1;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Msg_DataEntry_DoNotUse,
      std::string, ::Msg_VType,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Msg_VType

// string v_str = 1;
inline void Msg_VType::clear_v_str() {
  v_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Msg_VType::v_str() const {
  // @@protoc_insertion_point(field_get:Msg.VType.v_str)
  return _internal_v_str();
}
inline void Msg_VType::set_v_str(const std::string& value) {
  _internal_set_v_str(value);
  // @@protoc_insertion_point(field_set:Msg.VType.v_str)
}
inline std::string* Msg_VType::mutable_v_str() {
  // @@protoc_insertion_point(field_mutable:Msg.VType.v_str)
  return _internal_mutable_v_str();
}
inline const std::string& Msg_VType::_internal_v_str() const {
  return v_str_.Get();
}
inline void Msg_VType::_internal_set_v_str(const std::string& value) {
  
  v_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Msg_VType::set_v_str(std::string&& value) {
  
  v_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Msg.VType.v_str)
}
inline void Msg_VType::set_v_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Msg.VType.v_str)
}
inline void Msg_VType::set_v_str(const char* value,
    size_t size) {
  
  v_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Msg.VType.v_str)
}
inline std::string* Msg_VType::_internal_mutable_v_str() {
  
  return v_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Msg_VType::release_v_str() {
  // @@protoc_insertion_point(field_release:Msg.VType.v_str)
  return v_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg_VType::set_allocated_v_str(std::string* v_str) {
  if (v_str != nullptr) {
    
  } else {
    
  }
  v_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Msg.VType.v_str)
}

// int32 v_int = 2;
inline void Msg_VType::clear_v_int() {
  v_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::_internal_v_int() const {
  return v_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::v_int() const {
  // @@protoc_insertion_point(field_get:Msg.VType.v_int)
  return _internal_v_int();
}
inline void Msg_VType::_internal_set_v_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_int_ = value;
}
inline void Msg_VType::set_v_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v_int(value);
  // @@protoc_insertion_point(field_set:Msg.VType.v_int)
}

// bool v_bool = 3;
inline void Msg_VType::clear_v_bool() {
  v_bool_ = false;
}
inline bool Msg_VType::_internal_v_bool() const {
  return v_bool_;
}
inline bool Msg_VType::v_bool() const {
  // @@protoc_insertion_point(field_get:Msg.VType.v_bool)
  return _internal_v_bool();
}
inline void Msg_VType::_internal_set_v_bool(bool value) {
  
  v_bool_ = value;
}
inline void Msg_VType::set_v_bool(bool value) {
  _internal_set_v_bool(value);
  // @@protoc_insertion_point(field_set:Msg.VType.v_bool)
}

// repeated string vr_str = 4;
inline int Msg_VType::_internal_vr_str_size() const {
  return vr_str_.size();
}
inline int Msg_VType::vr_str_size() const {
  return _internal_vr_str_size();
}
inline void Msg_VType::clear_vr_str() {
  vr_str_.Clear();
}
inline std::string* Msg_VType::add_vr_str() {
  // @@protoc_insertion_point(field_add_mutable:Msg.VType.vr_str)
  return _internal_add_vr_str();
}
inline const std::string& Msg_VType::_internal_vr_str(int index) const {
  return vr_str_.Get(index);
}
inline const std::string& Msg_VType::vr_str(int index) const {
  // @@protoc_insertion_point(field_get:Msg.VType.vr_str)
  return _internal_vr_str(index);
}
inline std::string* Msg_VType::mutable_vr_str(int index) {
  // @@protoc_insertion_point(field_mutable:Msg.VType.vr_str)
  return vr_str_.Mutable(index);
}
inline void Msg_VType::set_vr_str(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Msg.VType.vr_str)
  vr_str_.Mutable(index)->assign(value);
}
inline void Msg_VType::set_vr_str(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Msg.VType.vr_str)
  vr_str_.Mutable(index)->assign(std::move(value));
}
inline void Msg_VType::set_vr_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vr_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Msg.VType.vr_str)
}
inline void Msg_VType::set_vr_str(int index, const char* value, size_t size) {
  vr_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Msg.VType.vr_str)
}
inline std::string* Msg_VType::_internal_add_vr_str() {
  return vr_str_.Add();
}
inline void Msg_VType::add_vr_str(const std::string& value) {
  vr_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Msg.VType.vr_str)
}
inline void Msg_VType::add_vr_str(std::string&& value) {
  vr_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Msg.VType.vr_str)
}
inline void Msg_VType::add_vr_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vr_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Msg.VType.vr_str)
}
inline void Msg_VType::add_vr_str(const char* value, size_t size) {
  vr_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Msg.VType.vr_str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Msg_VType::vr_str() const {
  // @@protoc_insertion_point(field_list:Msg.VType.vr_str)
  return vr_str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Msg_VType::mutable_vr_str() {
  // @@protoc_insertion_point(field_mutable_list:Msg.VType.vr_str)
  return &vr_str_;
}

// repeated int32 vr_int = 5;
inline int Msg_VType::_internal_vr_int_size() const {
  return vr_int_.size();
}
inline int Msg_VType::vr_int_size() const {
  return _internal_vr_int_size();
}
inline void Msg_VType::clear_vr_int() {
  vr_int_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::_internal_vr_int(int index) const {
  return vr_int_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::vr_int(int index) const {
  // @@protoc_insertion_point(field_get:Msg.VType.vr_int)
  return _internal_vr_int(index);
}
inline void Msg_VType::set_vr_int(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  vr_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:Msg.VType.vr_int)
}
inline void Msg_VType::_internal_add_vr_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  vr_int_.Add(value);
}
inline void Msg_VType::add_vr_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_vr_int(value);
  // @@protoc_insertion_point(field_add:Msg.VType.vr_int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Msg_VType::_internal_vr_int() const {
  return vr_int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Msg_VType::vr_int() const {
  // @@protoc_insertion_point(field_list:Msg.VType.vr_int)
  return _internal_vr_int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Msg_VType::_internal_mutable_vr_int() {
  return &vr_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Msg_VType::mutable_vr_int() {
  // @@protoc_insertion_point(field_mutable_list:Msg.VType.vr_int)
  return _internal_mutable_vr_int();
}

// bytes v_bytes = 6;
inline void Msg_VType::clear_v_bytes() {
  v_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Msg_VType::v_bytes() const {
  // @@protoc_insertion_point(field_get:Msg.VType.v_bytes)
  return _internal_v_bytes();
}
inline void Msg_VType::set_v_bytes(const std::string& value) {
  _internal_set_v_bytes(value);
  // @@protoc_insertion_point(field_set:Msg.VType.v_bytes)
}
inline std::string* Msg_VType::mutable_v_bytes() {
  // @@protoc_insertion_point(field_mutable:Msg.VType.v_bytes)
  return _internal_mutable_v_bytes();
}
inline const std::string& Msg_VType::_internal_v_bytes() const {
  return v_bytes_.Get();
}
inline void Msg_VType::_internal_set_v_bytes(const std::string& value) {
  
  v_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Msg_VType::set_v_bytes(std::string&& value) {
  
  v_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Msg.VType.v_bytes)
}
inline void Msg_VType::set_v_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Msg.VType.v_bytes)
}
inline void Msg_VType::set_v_bytes(const void* value,
    size_t size) {
  
  v_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Msg.VType.v_bytes)
}
inline std::string* Msg_VType::_internal_mutable_v_bytes() {
  
  return v_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Msg_VType::release_v_bytes() {
  // @@protoc_insertion_point(field_release:Msg.VType.v_bytes)
  return v_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg_VType::set_allocated_v_bytes(std::string* v_bytes) {
  if (v_bytes != nullptr) {
    
  } else {
    
  }
  v_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Msg.VType.v_bytes)
}

// int32 which = 7;
inline void Msg_VType::clear_which() {
  which_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::_internal_which() const {
  return which_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_VType::which() const {
  // @@protoc_insertion_point(field_get:Msg.VType.which)
  return _internal_which();
}
inline void Msg_VType::_internal_set_which(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  which_ = value;
}
inline void Msg_VType::set_which(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_which(value);
  // @@protoc_insertion_point(field_set:Msg.VType.which)
}

// -------------------------------------------------------------------

// Msg

// string desc = 1;
inline void Msg::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Msg::desc() const {
  // @@protoc_insertion_point(field_get:Msg.desc)
  return _internal_desc();
}
inline void Msg::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:Msg.desc)
}
inline std::string* Msg::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:Msg.desc)
  return _internal_mutable_desc();
}
inline const std::string& Msg::_internal_desc() const {
  return desc_.Get();
}
inline void Msg::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Msg::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Msg.desc)
}
inline void Msg::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Msg.desc)
}
inline void Msg::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Msg.desc)
}
inline std::string* Msg::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Msg::release_desc() {
  // @@protoc_insertion_point(field_release:Msg.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Msg.desc)
}

// map<string, .Msg.VType> data = 2;
inline int Msg::_internal_data_size() const {
  return data_.size();
}
inline int Msg::data_size() const {
  return _internal_data_size();
}
inline void Msg::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >&
Msg::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >&
Msg::data() const {
  // @@protoc_insertion_point(field_map:Msg.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >*
Msg::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Msg_VType >*
Msg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:Msg.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
